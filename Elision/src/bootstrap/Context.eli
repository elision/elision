/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

println("Reading Context...")

//======================================================================
// Context.
//======================================================================

decl.{! context()
#handler="""
  if(ornl.elision.actors.ReplActor.guiActor != null) {
    ornl.elision.actors.ReplActor.guiActor ! ("replFormat",true)
    ornl.elision.actors.ReplActor.guiActor ! ("replReduceLines", false)
    ornl.elision.actors.ReplActor.waitForGUI("formatting on")
  }
  sendln(context.toParseString)
  if(ornl.elision.actors.ReplActor.guiActor != null) {
    ornl.elision.actors.ReplActor.guiActor ! ("replFormat",false)
    ornl.elision.actors.ReplActor.guiActor ! ("replReduceLines", true)
    ornl.elision.actors.ReplActor.waitForGUI("formatting off")
  }
  _no_show"""
#description="Show the content of the current context."
#detail=
"Show the bindings, operators, and rules currently in the current context."
}

//======================================================================
// Automatic rewriting.
//======================================================================

decl.{! enable($x: SYMBOL)
#handler=
"""
  args match {
    case Args(SymbolLiteral(_, sym, _)) =>
      // Enable the specified ruleset.
      context.ruleLibrary.enableRuleset(sym.name)
      _no_show
    case _ => _no_show
  }
"""
#description="Enable the specified ruleset."
#detail=
"Enable the specified ruleset for automatic rewriting.  Rules in the ruleset ".
"will be automatically applied to atoms."
}

decl.{! disable($x: SYMBOL)
#handler=
"""
  args match {
    case Args(SymbolLiteral(_, sym, _)) =>
      // Enable the specified ruleset.
      context.ruleLibrary.disableRuleset(sym.name)
      _no_show
    case _ => _no_show
  }
"""
#description="Disable the specified ruleset."
#detail=
"Disable the specified ruleset for automatic rewriting.  Rules in the ruleset ".
"may still be used if they are also in another enabled ruleset."
}

decl.{! setlimit($limit: INTEGER)
#handler=
"""
  args match {
    case Args(IntegerLiteral(_, count)) =>
      // Enable the specified ruleset.
      context.ruleLibrary.setLimit(count)
      emitln("Rewrite limit is now " + count + ".")
      _no_show
    case _ => _no_show
  }
"""
#description="Set the automatic rewrite limit."
#detail=
"Specify the maximum number of times to rewrite an atom using the automatic ".
"rewriter.  Using zero disables the rewriter."
}

decl.{! setdescend($enable: BOOLEAN)
#handler=
"""
  args match {
    case Args(BooleanLiteral(_, flag)) =>
      // Set whether to descend.
      context.ruleLibrary.setDescend(flag)
      emitln("Top-down rewriting is " + (if (flag) "ON." else "OFF."))
      _no_show
    case _ => _no_show
  }
"""
#description="Set whether to descend into children during rewriting."
#detail=
"Specify whether to descend into children during rewriting.  If true then ". 
"try to rewrite children of atoms."
}

//======================================================================
// Rule management.
//======================================================================

decl.{! showrules($atom)
#handler=
"""
  args match {
    case Args(atom) =>
      // Get the rules, and print each one.
      for (rule <- context.ruleLibrary.getRules(atom)) {
        sendln(rule.toParseString)
      }
      _no_show
    case _ => _no_show
  }
"""
#description="Show the rules that may apply to a given atom."
#detail=
"The atom $atom is passed to the current context's rule library and the rules ".
"that will be used to rewrite it are returned and printed."
}

decl.{! declare($r1: SYMBOL, $r2: SYMBOL): SYMBOL is %ACI
#handler=
"""
  args foreach { _ match {
    case sl:SymbolLiteral =>
      // Declare the specified ruleset.
      context.ruleLibrary.declareRuleset(sl.value.name)
      emitln("Declared ruleset " + sl.toParseString + ".")
    case _ =>
  }}
  _no_show
"""
#description="Declare one or more rulesets."
#detail=
"Declare the named rulesets.  Rulesets must be declared before use, but they ".
"can be re-declared without error."
}

//======================================================================
// Load / Save
//======================================================================

decl.{! loadcontext($filename: STRING)
  #handler="""
  args match {
    case Args(StringLiteral(_, filename)) =>
      exec match {
        case proc: ornl.elision.parse.Processor =>
          console.reset
          val old = proc.context
          proc.context = new Context()
          console.emitln("Reading " + filename + "...")
          val priorquiet = console.quiet
          console.quiet = 1
          val result = proc.read(filename, true)
          console.quiet = priorquiet
          if (result) {
            if (console.errors > 0) {
              proc.context = old
              console.error("Errors were detected processing "+filename +".")
            }
          } else {
            proc.context = old
          }
      }
      _no_show
    case _ =>
      _no_show
  }
  """
  #description="Load a previously-saved context."
  #detail="Attempt to reload a previous context, replacing this session."
}

decl.{! savecontext($filename: STRING)
  #handler="""
  args match {
    case Args(StringLiteral(_, filename)) =>
      console.emitln("Writing " + filename + "...")
      val cfile = new java.io.FileWriter(filename)
      if (cfile != null) {
        cfile.write(context.toParseString)
        cfile.flush()
        cfile.close()
      } else {
        console.warn("Unable to save context.")
      }
      _no_show
    case _ =>
      _no_show
  }
  """
  #description="Save the current context."
  #detail="Attempt to write the current context to the specified file."
}

//======================================================================
// Core Dump
//======================================================================

decl.{! fail()
  #handler=
  """throw new VerifyError("core dump requested by user")"""
  #description="Generate a runtime exception."
  #detail=
  "Generate a runtime exception (a VerifyError).  This causes a core dump and ".
  "may be useful if you are trying to debug the system."
}

decl.{! loadcoredump($path: STRING)
#handler=
"""
  args match {
    case Args(StringLiteral(_, path)) =>
      // Load the core dump xml file and build a new context and history from it.
      emitln("Loading core dump from file: " + path + "...\n")
      exec match {
        case proc : ornl.elision.parse.Processor =>
            proc.loadCoredump(path)
        case _ => 
            // Silently ignore this.
      }
      _no_show
    case _ => _no_show
  }
"""
#description="Reloads a core dump created with fail()."
#detail=
"Replaces the current context and history with context and history in a core ". 
"dump created with fail(). It also prints the error message generated by the ".
"core dump."
}

//======================================================================
// Checkpoints
//======================================================================

decl.{! savecheckpt()
#handler=
"""
  exec match {
    case proc : ornl.elision.parse.Processor =>
        val checkptid = proc.saveCheckPt
        emitln("Saved checkpoint. ID: " + checkptid + "\n")
    case _ =>
        // Silently ignore this.
  }
  _no_show
"""
#description="Saves a checkpoint for the current context. "
#detail=
"Saves a checkpoint for the current context and displays the checkpoint's ". 
"id. This id is an integer that can be used to load a saved checkpoint with ".
"loadcheckpt()."
}

decl.{! loadcheckpt($id: INTEGER)
#handler=
"""
  args match {
    case Args(IntegerLiteral(_, id)) =>
      exec match {
        case proc : ornl.elision.parse.Processor =>
            if(proc.loadCheckPt(id.toInt)) emitln("Loaded context checkpoint " + id)
            else emitln("Failed to load context checkpoint" + id)
        case _ => 
            // Silently ignore this.
      }
    case _ =>
  }
  _no_show
"""
#description="Loads a context checkpoint saved with savecheckpt()."
#detail=
"Loads a context checkpoint that was saved with savecheckpt(). "
}

decl.{! showcheckpts()
#handler=
"""
  exec match {
    case proc : ornl.elision.parse.Processor =>
        val checkptid = proc.displayCheckPts
    case _ =>
        // Silently ignore this.
  }
  _no_show
"""
#description="Displays a list of this session's context checkpoints. "
#detail=
"Displays a list of this session's context checkpoints. "
}

