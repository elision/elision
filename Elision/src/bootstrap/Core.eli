/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

println("Reading Core...")

//======================================================================
// Control properties.
//======================================================================

decl.{! setprop($name: STRING, $val)
  #handler=
  """
    args match {
      case Args(StringLiteral(_, name), value) =>
        value match {
          case StringLiteral(_, str) =>
            exec.setProperty(name, str)
            _no_show
          case IntegerLiteral(_, value) =>
            exec.setProperty(name, value)
            _no_show
          case BooleanLiteral(_, flag) =>
            exec.setProperty(name, flag)
            _no_show
          case _ =>
            console.error("Only STRING, INTEGER, and BOOLEAN values are allowed.")
            _no_show
        }
      case _ => as_is
    }
  """
  #description="Set a property value."
  #detail=
  "Set the value of a property.  The property name (a STRING), is given as ".
  "the first argument, and the value (which must be a STRING, INTEGER, or ".
  "BOOLEAN) is given as the second argument."
}

decl.{! getprop($name: STRING)
  #handler=
  """
    args match {
      case Args(StringLiteral(_, name)) =>
        val value = exec.getProperty[Any](name)
        value match {
          case str: String =>
            Literal(str)
          case value: BigInt =>
            Literal(value)
          case value: Int =>
            Literal(value)
          case flag: Boolean =>
            Literal(flag)
          case _ =>
            console.error("Bad stored property value detected.")
            NONE
        }
      case _ => as_is
    }
  """
  #description="Get a property value."
  #detail=
  "Get the value of a property.  The property is looked up by name (given ".
  "as a STRING value)."
}

decl.{! listprops()
  #handler=
  """
    val width = (scala.tools.jline.TerminalFactory.create().getWidth() max 5)
    exec.writeProperties(console, width)
    _no_show
  """
  #description="List all the known properties."
  #detail=
  "List all the declared properties, a short description, and their current ".
  "value."
}

//======================================================================
// If.
//======================================================================

decl.{operator #name=if #cases
  %(true, $then @lazy, $else @lazy) -> $$then,
  %(false, $then @lazy, $else @lazy) -> $$else,
  %($P: BOOLEAN, $then @lazy, $else @lazy) -> _
  #description="Simple if-then(-else)."
  #detail=
  "If the first argument is true, return the second.  If the first argument ".
  "is false, return the third."
}

//======================================================================
// Meta.
//======================================================================

decl.{! eval($atom)
  #handler=
  """
    args match {
      case Args(x) =>
        // Immediately rewrite this with the context bindings,
        // and return the result.
        x.rewrite(context.binds)._1
      case _ =>
        NONE
    }
  """
  #description="Force fast rewrite using the current bindings."
  #detail=
  "The context bindings are typically applied after an atom is parsed and ".
  "constructed.  This forces any bound variables in $atom to be rewritten ".
  "immediately.  It is most useful when $atom is the argument to some other ".
  "operator."
}

decl.{! operator($name)
  #description="Look up an operator."
  #detail=
  "Given the name of an operator (as a string or symbol), look up the ".
  "operator and return a reference to it."
  #handler=
  """
  args match {
    case Args(SymbolLiteral(_, sym)) =>
      context.operatorLibrary(sym.name)
    case Args(StringLiteral(_, name)) =>
      context.operatorLibrary(name)
    case _ => as_is
  }
  """
}

decl.{! getop($x)
  #handler=
  """
    def getop(name: String) = context.operatorLibrary(name).operator
    args match {
      case Args(opref:OperatorRef) =>
        // Get the referenced operator.
        opref.operator
      case Args(op: Operator) =>
      	op
      case Args(SymbolLiteral(_, sym)) =>
        getop(sym.name)
      case Args(StringLiteral(_, name)) =>
        getop(name)
      case Args(v: Variable) =>
        as_is
    }
  """
  #description="Given an operator reference, return the operator."
  #detail=
  "Given the operator reference $x, resolve the reference to the actual ".
  "operator and return the operator."
}

decl.{! setdebruijn($enable: BOOLEAN)
  #handler=
  """
    args match {
      case Args(BooleanLiteral(_, flag)) =>
        // Set whether to use De Bruijn indices.
        Lambda.useDeBruijnIndices = flag
        emitln("De Bruijn rewriting is " + (if (flag) "ON." else "OFF."))
        _no_show
      case _ => _no_show
    }
  """
  #description="Enable or disable the use of DeBruijn indices."
  #detail=
  "Specify whether to use DeBruijn indices for lambdas.  Disabling this is ".
  "only useful when you are debugging lambdas."
}

decl.{! is_bindable($x): BOOLEAN
  #handler=
  """
    args match {
      case Args(term) =>
        if (term.isBindable) Literal.TRUE else Literal.FALSE
      case _ =>
        as_is
    }
  """
  #description="Determine whether an atom is bindable."
  #detail=
  "If the atom $x is bindable, return true.  Otherwise, return false.  This ".
  "is primarily useful for guards.  You will probably need to protect ".
  "variables by making them into metavariables ($$ instead of $) to prevent ".
  "zealous evaluation."
}

//======================================================================
// Help system.
//======================================================================

decl.{! _help_op($r)
  #handler=
  """
    def givehelp(name: String) = {
      // Give some help.
      val width = if(ornl.elision.repl.ReplActor.guiMode) ornl.elision.repl.ReplActor.guiColumns else scala.tools.jline.TerminalFactory.create().getWidth()
      val op = context.operatorLibrary(name)
      sendln(context.operatorLibrary.help(
        new StringBuffer(), op, width).toString)
      _no_show
    }
    args match {
      case Args(or: OperatorRef) =>
        givehelp(or.name)
      case Args(SymbolLiteral(_, sym)) =>
        givehelp(sym.name)
      case Args(StringLiteral(_, name)) =>
        givehelp(name)
      case _ =>
        as_is
    }
  """
  #description="Display detailed help for an operator."
  #detail="Display help text for the operator referenced by $r."
}

decl.{! _help_all()
  #handler=
  """
    args match {
      case Args() =>
        // Give some help.
        val width = if(ornl.elision.repl.ReplActor.guiMode) ornl.elision.repl.ReplActor.guiColumns else scala.tools.jline.TerminalFactory.create().getWidth()
        val buf = new StringBuffer()
        buf.append("Elision Help\n\n")
        context.operatorLibrary.help(buf, width)
        buf.append("\nUse ! followed by a number to re-execute a " +
          "line from the history.\n\nTo quit type :quit.\n")
        sendln(buf.toString)
      case _ =>
    }
    _no_show
  """
  #description="Display a list of known operators."
  #detail=
  "Display a list of known operators, along with a short description of each ".
  "one (if given).  Operators whose name begins with an underscore are ".
  "suppressed in this list."
}

decl.{! apropos($str:STRING)
  #handler=
  """
    args match {
      case Args(StringLiteral(_, apropos)) =>
        // Give some help.
        val width = if (ornl.elision.repl.ReplActor.guiMode)
          ornl.elision.repl.ReplActor.guiColumns
        else
          scala.tools.jline.TerminalFactory.create().getWidth()
        val buf = new StringBuffer()
        buf.append("Elision Help\n\n")
        context.operatorLibrary.help(buf, width, apropos)
        buf.append("\nUse ! followed by a number to re-execute a " +
          "line from the history.\n\nTo quit type :quit.\n")
        sendln(buf.toString)
      case _ =>
    }
    _no_show
  """
  #description="Display a list of known operators."
  #detail=
  "Display a list of known operators, along with a short description of each ".
  "one (if given).  Operators whose name begins with an underscore are ".
  "suppressed in this list."
}

decl.{ operator #name=help #cases
  %($r:OPREF) -> _help_op($$r), 
  %($r:SYMBOL) -> _help_op($$r), 
  %($r:STRING) -> _help_op($$r), 
  %() -> _help_all.$$_
  #description="Get general help or help on an operator."
  #detail=
  "With no argument, list all operators.  If provided with an operator ".
  "reference, give detailed help on that operator."
}

//======================================================================
// File management.
//======================================================================

decl.{! read($filename: STRING)
  #handler=
  """
  args match {
    case Args(StringLiteral(_, filename)) =>
      exec match {
        case proc: ornl.elision.parse.Processor =>
          proc.read(filename, console.quiet > 1)
          _no_show
        case _ =>
          console.error("The read operator is not supported.")
          false
      }
    case _ =>
      // Not a string literal, so preserve it.
      as_is
  }
  """
  #description="Read the content of the specified file."
  #detail=
  "Read the file specified by $filename, executing each line of the file as ".
  "though it were typed at the REPL prompt while quiet mode was in effect ".
  "(so most output is suppressed).  No numbered repl bindings are generated ".
  "from this action."
}

decl.{! write($filename: STRING)
  #handler=
  """
    args match {
      case Args(StringLiteral(_, filename)) =>
        val cfile = new java.io.FileWriter(filename)
        if (cfile != null) {
          cfile.write(context.toParseString)
          cfile.flush()
          cfile.close()
        } else {
          error("Unable to save context.")
        }
        _no_show
      case _ => _no_show
    }
  """
  #description="Write the content of the current context to a file."
  #detail="Write the current context to the file specified by $filename."
}

//======================================================================
// Manage bindings.
//======================================================================

decl.{! bind($v,$a)
  #handler=
  """
    args match {
      case Args(from:Variable, to:BasicAtom) =>
        // Bind the variable in this context.
        context.bind(from.name, to)
        emitln("Bound " + from.toParseString)
        ApplyData._no_show
      case _ => ApplyData._no_show
    }
  """
  #description="Bind a variable to an atom."
  #detail=
  "Bind the variable $v to the atom $a in the current context.  Variable ".
  "bindings are applied after an atom is parsed and constructed, but before ".
  "it is displayed by the REPL.  Variables can be arbitrarily re-bound."
}

decl.{! unbind($v)
  #handler=
  """
    args match {
      case Args(from:Variable) =>
        // Unbind the variable in this context.
        context.unbind(from.name)
        emitln("Unbound " + from.toParseString)
      case _ =>
    }
    _no_show
  """
  #description="Unbind a variable."
  #detail="Forget any binding for variable $v in the current context."
}

decl.{! showbinds()
  #handler=
  """
    sendln(context.binds.filterKeys(!_.startsWith("_")).map {
      pair => "  %10s -> %s".format(toESymbol(pair._1), pair._2.toParseString)
    }.mkString("{ binds\n", ",\n", "\n}"))
    _no_show
  """
  #description="Show the bindings in the current context."
  #detail=
  "Show all the bindings present in the current context, except for bindings ".
  "to variables whose name starts with an underscore, as these are considered ".
  "\"private.\""
}

//======================================================================
// Tracing and timing.
//======================================================================

decl.{! traceparse()
  #handler=
  """
    exec match {
      case tp: TraceableParse =>
        // Toggle tracing.
        tp.trace = !tp.trace
        emitln("Parser tracing is " + (if (tp.trace) "ON." else "OFF."))
      case _ =>
    }
    _no_show
  """
  #description="Toggle tracing of the parser."
  #detail=
  "Enable or disable tracing the parser.  This is really only useful if you ".
  "are trying to debug the parser, and want to know in extreme detail how ".
  "something parses.  It may generate a *lot* of output. ".
  "\n\n".
  "This is optional; if multiple parsers are present, some may not support ".
  "tracing."
}

decl.{! tracematch()
  #handler=
  """
    args match {
      case Args() =>
        // Toggle tracing.
        BasicAtom.traceMatching = !BasicAtom.traceMatching
        emitln("Match tracing is " +
            (if (BasicAtom.traceMatching) "ON." else "OFF."))
        _no_show
      case _ => _no_show
    }
  """
  #description="Toggle tracing of matching attempts."
  #detail=
  "Enable or disable tracing of match attempts.  This generates output from ".
  "the matcher as it attempts to match atoms.  The matcher is called for a ".
  "variety of reasons, so you may see some unexpected output here."
}

decl.{! tracerules()
  #handler=
  """
    args match {
      case Args() =>
        // Toggle tracing.
        BasicAtom.traceRules = !BasicAtom.traceRules
        emitln("Rule application tracing is " +
            (if (BasicAtom.traceRules) "ON." else "OFF."))
        _no_show
      case _ => _no_show
    }
  """
  #description="Toggle tracing of rule applications"
  #detail=
  "Enable or disable tracing of rule applications. Information about ".
  "each rule applied during rewriting and the result of each rewrite ".
  "is printed."
}

decl.{! printtypes()
  #handler=
  """
    args match {
      case Args() =>
        // Toggle tracing.
        BasicAtom.printTypeInfo = !BasicAtom.printTypeInfo
        emitln("Showing literal/variable types is " +
            (if (BasicAtom.printTypeInfo) "ON." else "OFF."))
        _no_show
      case _ => _no_show
    }
  """
  #description="Toggle the printing of type information for literals/variables."
}

decl.{! timing($f:BOOLEAN)
  #handler=
  """
    exec match {
      case tm: Timeable =>
        // Toggle timing.
        tm.timing = !tm.timing
        emitln("Timing is " + (if (tm.timing) "ON." else "OFF."))
        _no_show
      case _ => _no_show
    }
  """
  #description="Toggle showing the evaluation time."
  #detail=
  "Toggle showing the total elapsed \"wall clock\" time to evaluate an atom. ".
  "The result shows minutes, seconds, and milliseconds."
}

//======================================================================
// Display.
//======================================================================

decl.{! quiet($level: INTEGER)
  #handler=
  """
    args match {
      case Args(IntegerLiteral(_, level)) =>
        if (level < 0) console.quiet = 0
        else if (level > 4) console.quiet = 3
        else console.quiet = level.toInt
      case _ => as_is
    }
    emitln("Quiet is " + (if (console.quiet > 0) "enabled." else "disabled."))
    _no_show
  """
  #description="Set the quiet level."
  #detail=
  "Specify whether to suppress output.  There are several levels available.  ".
  "Level 0 enables all output, and is the usual mode.  Level 1 suppresses ".
  "all \"casual\" output.  Level 2 suppresses warnings.  Level 3 suppresses ".
  "errors.  Level 4 suppresses pretty much everything, and should be avoided ".
  "unless you have a good reason.  If you enter a level above 4, the system ".
  "will assume you don't know what you are doing and set the level to 3.  ".
  "If you enter a negative number, the system will assume 0."
}

decl.{! history()
  #handler=
  """
    exec match {
      case hh: HasHistory =>
        // Show the history.
        val buf = new StringBuffer()
        val it = hh.getHistoryIterator
        while (it.hasNext) buf.append(it.next + "\n")
        buf.append("Persistent history is found in: " + hh.getHistoryFilename)
        sendln(buf.toString())
        _no_show
      case _ =>
        _no_show
    }
  """
  #description="Show the current history."
  #detail=
  "Show the current history of lines executed.  This history is numbered, and ".
  "numbered items in the history can be recalled later.  The history is saved ".
  "between sessions, if possible."
}

//======================================================================
// Atom information.
//======================================================================

decl.{! showtypes($a)
  #handler="""
    val showscala = exec.getProperty[Boolean]("showscala")
    var here = args(0)
    while (here != TypeUniverse) {
      if (showscala) {
        printf("--> %s  (%s)\n", here.toParseString, here.getClass.toString)
      } else {
        println("--> "+here.toParseString)
      }
      here = here.theType
    }
    if (showscala) {
      printf("--> %s  (%s)\n", here.toParseString, here.getClass.toString)
    } else {
      println("--> "+here.toParseString)
    }
    _no_show
  """
  #description="Show the complete type information for an atom."
  #detail="Show all type information for the atom $a.  The atom is ".
  "printed, followed by its type, followed by the type's type, etc., ".
  "until ^TYPE is reached.  If showscala is enabled, the Scala class ".
  "is also printed."
}

//======================================================================
// Error reporting.
//======================================================================

decl.{! fail()
  #handler=
  """throw new VerifyError("core dump requested by user")"""
  #description="Generate a runtime exception."
  #detail=
  "Generate a runtime exception (a VerifyError).  This causes a core dump and ".
  "may be useful if you are trying to debug the system."
}
