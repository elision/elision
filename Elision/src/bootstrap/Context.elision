/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

//======================================================================
// Context.
//======================================================================

def({! context()
      #description="Show the content of the current context."
      #detail=
"""Show the bindings, operators, and rules currently in the current
context."""
})

//======================================================================
// Automatic rewriting.
//======================================================================

def({! rewrite()
      #description="Toggle whether automatic rewriting is allowed."
      #detail=
"""Toggle whether to perform automatic rewriting.  The system will perform
rewriting based on the enabled rulesets and the rewrite limit, if
automatic rewriting is enabled."""
})

def({! enable($x: SYMBOL)
      #description="Enable the specified ruleset."
      #detail=
"""Enable the specified ruleset for automatic rewriting.  Rules in the ruleset
will be automatically applied to atoms."""
})
def({! disable($x: SYMBOL)
      #description="Disable the specified ruleset."
      #detail=
"""Disable the specified ruleset for automatic rewriting.  Rules in the ruleset
may still be used if they are also in another enabled ruleset."""
})

def({! setlimit($limit: INTEGER)
      #description="Set the automatic rewrite limit."
      #detail=
"""Specify the maximum number of times to rewrite an atom using the automatic
rewriter.  Using zero disables the rewriter."""
})

def({! setdescend($enable: BOOLEAN)
      #description="Set whether to descend into children during rewriting."
      #detail=
"""Specify whether to descend into children during rewriting.  If true then 
try to rewrite children of atoms."""
})

def({! setroundtrip($enable: BOOLEAN)
      #description="Set whether to perform round-trip testing."
      #detail=
"""Specify whether to perform round-trip testing.  When an atom is entered
and evaluated, the result is converted to a string, and the string parsed.
If the original is not equal to the result, then a "round trip parse"
failure is printed.  You will want to disable this if you are trying
to trace either the rewriter or the parser."""
})

def({! rewrite()
      #description="Toggle whether automatic rewriting is allowed."
      #detail=
"""Toggle whether to perform automatic rewriting.  The system will perform
rewriting based on the enabled rulesets and the rewrite limit, if
automatic rewriting is enabled."""
})

//======================================================================
// Rule management.
//======================================================================

def({! showrules($atom)
      #description="Show the rules that may apply to a given atom."
      #detail=
"""The atom $atom is passed to the current context's rule library and the
rules that will be used to rewrite it are returned and printed."""
})

def({! declare($r1: SYMBOL, $r2: SYMBOL): SYMBOL is %ACI
      #description="Declare one or more rulesets."
      #detail=
"""Declare the named rulesets.  Rulesets must be declared before use, but they
can be re-declared without error."""
})
