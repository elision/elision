/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

// Notify the user.
{! _() #handler=""" console.sendln("Bootstrapping...") ; _no_show """}.%()

// Define and declare the _decl operator, so we can declare other operators.
// We do this by using the _decl operator to declare itself.  This allows us
// to declare _decl the same way we declare any other operator, except that
// instead of wrapping it with a _decl, we use a lambda.
\$def.($def.%($def)).{! _decl($item)
#handler=
"""
  args(0) match {
    case op: Operator =>
      context.operatorLibrary.add(op)
      console.emitln("Declared operator " + toESymbol(op.name) + ".")
      _no_show
    case rule: RewriteRule =>
      context.ruleLibrary.add(rule)
      console.emitln("Declared rule.")
      _no_show
    case _ =>
      as_is
  }
"""
#evenmeta=true
#description="Declare a rule or operator in the current context."
#detail=
"Given a rewrite rule, add the rewrite rule to the rule library in the ".
"current context.  Given an operator, add the operator to the operator ".
"library in the current context."
}

// Declare the decl operator that allows us to use the notation decl.thing.
_decl({operator
#name=decl
#evenmeta=true
#description="Declare a rule or operator in the current context."
#detail=
"Given a rewrite rule, add the rewrite rule to the rule library in the ".
"current context.  Given an operator, add the operator to the operator ".
"library in the current context."
#cases
  %($item) -> _decl($$item),
  $item -> _decl($$item)
})

// Preserve the old def operator, in case someone is still using it.
decl.{! def($op)
#handler=
"""
  console.warn("The def operator is deprecated.  Please use decl instead.")
  args match {
    case Args(op: Operator) =>
      // Add the operator to the library.
      context.operatorLibrary.add(op)
      console.emitln("Defined operator " + toESymbol(op.name) + ".")
      ApplyData._no_show
    case Args(op) =>
      console.error("Atom is not a named operator: " + op.toParseString)
      ApplyData._no_show
    case _ =>
      ApplyData._no_show
  }
"""
#evenmeta=true
#description="Add the named operator to the context."
#detail=
"This will add the operator op to the current context.  This makes ".
"the operator available by name, or through an OPREF."
}

// The next operator we need is inc so we can read the rest of the
// bootstrap definitions.  Define inc next.  It expects to get access
// to a set of known, already read files, and we use the executors cache
// for this.
decl.
{! inc($fn: STRING)
#handler=
"""
  // We use a mutable set in the executor cache to store the names of all
  // files read.  There are other approaches, but this one will probably do
  // for now.
  import scala.collection.mutable.Set
  
  // Go and get the included files from the cache.
  val included = 
    exec.fetchAs[Set[String]]("read_once.included", Set[String]())
  args match {
    case Args(StringLiteral(_, filename)) =>
      exec match {
        case proc: ornl.elision.parse.Processor =>
          if (!included.contains(filename)) {
            if (proc.read(filename, console.quiet > 1))
              included += filename
          }
          // Silently ignore this.
        case _ =>
          // Silently ignore this, too.
      }
      _no_show
    case _ =>
      // Not a string literal, so preserve it.
      as_is
  }
"""
#description="Read the content of the specified file."
#detail=
"Read the file specified by $filename, executing each line of the file as ".
"though it were typed at the REPL prompt while quiet mode was in effect ".
"(so most output is suppressed).  No numbered repl bindings are generated ".
"from this action."
}

// Do all your base belong to us?
decl.
{! _bomb()
#handler=
"""
  println("Somebody set up us the bomb!")
  java.awt.Desktop.getDesktop.browse(new java.net.URI("http://www.youtube.com/watch?v=qItugh-fFgg"))
  
  _no_show
"""
#description="In 2101 war was beginning..."
#detail="Set up the bomb.  Then all their base are belong to you!"
}

// Create an operator that emits the atom as a side effect.
decl.
{! print($a: STRING)
#handler=
"""
  args match {
    case Args(StringLiteral(_, str)) => print(str)
    case _ =>
  }
  _no_show
"""
#description="Print the given string."
#detail=
"Print the provided string literal to the console."
}

decl.
{! println($a: STRING)
#handler=
"""
  args match {
    case Args(StringLiteral(_, str)) => console.sendln(str)
    case _ =>
  }
  _no_show
"""
#description="Print the given string and a newline."
#detail="Print the provided string literal to the console followed by a newline."
}

inc("bootstrap/Type.eli")
inc("bootstrap/Core.eli")
inc("bootstrap/Context.eli")
