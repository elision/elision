/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

println("Reading Math...")

//======================================================================
// Automatic simplification rulesets.
//======================================================================

// Declare and enable the ruleset for symbolic evaluation.
declare(EVALUATE)
enable(EVALUATE)

// Declare and enable the ruleset for always beneficial rewrites.
declare(ALWAYS)
enable(ALWAYS)


//======================================================================
// Partial function operators.
//======================================================================

// Declare and enable the ruleset for domain computation.
declare(DOMAIN)
enable(DOMAIN)


decl.{! is_defined($x @non_strict): BOOLEAN
  #description="Test whether the argument is defined."
  #detail=
  "Return true if the argument is defined. ".
  "Return false if the argument is the bottom element."
}

decl.{ rule
          is_defined(is_defined($x))
       ->
          true
       #ruleset DOMAIN }

decl.{ rule
          is_defined($x{is_literal($$x)})
       ->
          true
       #ruleset EVALUATE }


decl.{! diverge($T: ^TYPE, $msg: STRING): $T
  #description="Return the bottom element of type $T."
  #detail=
  "This term represents the bottom element of type $T. ".
  "The second argument is an error message to contain and propagate the ".
  "reason for creating the undefined term."
}

decl.{ rule
          is_defined(diverge($T,$msg))
       ->
          false
       #ruleset DOMAIN }


//======================================================================
// Equality operators.
//======================================================================

decl.{! eq($x,$y): BOOLEAN is %C
#handler=
"""
  args match {
    case Args(x:BasicAtom, y:BasicAtom) => x == y
    case _ => _no_show
  }
"""
#description="Eagerly test whether two atoms are equal."
#detail=
"Test whether the two atoms $x and $y are considered equal by the system."
}

decl.{! equal($x,$y): BOOLEAN is %C
	#handler="""
	  args match {
	    case Args(x,y) if x.isConstant && y.isConstant => x == y
	    case _ => as_is
	  }
	"""
  #description="Test whether two atoms are equal."
  #detail=
  "Test whether $x and $y are equal.  The test is performed iff both are ".
  "constant terms and is deferred otherwise."
}


//======================================================================
// Boolean math.
//======================================================================

decl.{! not($x: BOOLEAN): BOOLEAN
  #handler="""
    args match {
      case Args(BooleanLiteral(_,x)) => (!x)
      case _ => as_is
    }
  """
  #description="Boolean not operator."
  #detail="Evaluate to true if $x is false. ".
          "Evaluate to false if $x is true."
}

decl.{ rule
          is_defined(not($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }

decl.{ rule
          not(not($x))
       ->
          $x
       #ruleset ALWAYS }


decl.{! and($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is %ACID[true]
  #handler="""
    // Accumulate the boolean literals found.
    var lits:Boolean = true
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case BooleanLiteral(_, value) => lits &&= value
        case _ => other :+= x
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(BOOLEAN, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Boolean conjunction."
  #detail="Evaluate to true if $x and $y are both true. ".
          "Evaluate to false if either $x or $y is false."
}

decl.{ rule
          is_defined(and($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! or($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is %ACID[false]
  #handler="""
    // Accumulate the boolean literals found.
    var lits:Boolean = false
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case BooleanLiteral(_, value) => lits ||= value
        case _ => other :+= x
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(BOOLEAN, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Boolean disjunction."
  #detail="Evaluate to true if either $x or $y is true. ".
          "Evaluate to false if both $x and $y are false."
}

decl.{ rule
          is_defined(or($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! lazy_and($x: BOOLEAN, $y: BOOLEAN @lazy): BOOLEAN is %A!CID[true]
  #handler="""
    // Accumulate the boolean literals found.
    var lits:Boolean = true
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case BooleanLiteral(_, value) =>
          lits &&= value
        case _ =>
          if (lits == true) {
            other :+= x
          }
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(BOOLEAN, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Boolean lazy conjunction."
  #detail="Evaluate to true if $x and $y are both true. ".
          "Evaluate to false if either $x or $y is false. ".
          "Do not evaluate $y if $x is false."
}

decl.{ rule
          is_defined(lazy_and($x,$y))
       ->
          and(is_defined($x),
              or(is_defined($y), lazy_and(is_defined($x), not($x))) )
       #ruleset DOMAIN }


decl.{! lazy_or($x: BOOLEAN, $y: BOOLEAN @lazy): BOOLEAN is %A!CID[false]
  #handler="""
    // Accumulate the boolean literals found.
    var lits:Boolean = false
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case BooleanLiteral(_, value) =>
          lits ||= value
        case _ =>
          if (lits == false) {
            other :+= x
          }
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(BOOLEAN, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Boolean lazy disjunction."
  #detail="Evaluate to true if either $x or $y is true. ".
          "Evaluate to false if both $x and $y are false. ".
          "Do not evaluate $y if $x is true."
}

decl.{ rule
          is_defined(lazy_or($x,$y))
       ->
          and(is_defined($x),
              or(is_defined($y), lazy_and(is_defined($x), $x)) )
       #ruleset DOMAIN }


decl.{! xor($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is %AC!ID[false]
  #handler="""
    // Accumulate the boolean literals found.
    var lits:Boolean = false
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case BooleanLiteral(_, value) => lits ^= value
        case _ => other :+= x
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(BOOLEAN, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Boolean exclusive or."
  #detail="Evaluate to true if exactly one of $x and $y is true. ".
          "Evaluate to false if $x and $y are equal."
}

decl.{ rule
          is_defined(xor($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! equiv($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is %C!I
  #handler="""
    args match {
      case Args(BooleanLiteral(_,x),BooleanLiteral(_,y)) => (x == y)
      case _ => as_is
    }
  """
  #description="Boolean equivalence."
  #detail="Evaluate to true if $x and $y are equal. ".
          "Evaluate to false if $x and $y are not equal."
}

decl.{ rule
          is_defined(equiv($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }

decl.{ rule
          equiv(true,$x)
       ->
          $x
       #ruleset ALWAYS }


decl.{! not_equiv($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is %C!I
  #handler="""
    args match {
      case Args(BooleanLiteral(_,x),BooleanLiteral(_,y)) => (x != y)
      case _ => as_is
    }
  """
  #description="Boolean inequivalence."
  #detail="Evaluate to true if $x and $y are not equal. ".
          "Evaluate to false if $x and $y are equal."
}

decl.{ rule
          is_defined(not_equiv($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }

decl.{ rule
          not_equiv(false,$x)
       ->
          $x
       #ruleset ALWAYS }


decl.{! implies($x: BOOLEAN, $y: BOOLEAN): BOOLEAN is !A!C!I
  #handler="""
    args match {
      case Args(BooleanLiteral(_,x),BooleanLiteral(_,y)) => (y || !x)
      case _ => as_is
    }
  """
  #description="Boolean implication."
  #detail="Evaluate to true if $y is true or if $x is false. ".
          "Evaluate to false if $x is true and $y is false."
}

decl.{ rule
          is_defined(implies($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! lazy_implies($x: BOOLEAN, $y: BOOLEAN @lazy): BOOLEAN is !A!C!I
  #handler="""
    args match {
      case Args(BooleanLiteral(_,x), y) =>
        if (x) {
          y
        } else {
          true
        }
      case _ => as_is
    }
  """
  #description="Boolean lazy implication."
  #detail="Evaluate to true if $y is true or if $x is false. ".
          "Evaluate to false if $x is true and $y is false. ".
          "Do not evaluate $y if $x is false."
}

decl.{ rule
          is_defined(lazy_implies($x,$y))
       ->
          and(is_defined($x),
              or(is_defined($y), lazy_and(is_defined($x), not($x))) )
       #ruleset DOMAIN }


//======================================================================
// Integer math, arithmetic operators.
//======================================================================

decl.{! int_add($x: INTEGER, $y: INTEGER): INTEGER is %AC!ID[0]
  #handler="""
    // Accumulate the integer literals found.
    var lits:BigInt = 0
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case IntegerLiteral(_, value) => lits += value
        case _ => other :+= x
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(INTEGER, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Compute the integer sum of the arguments."
  #detail="Compute the sum of the integer arguments."
}

decl.{ rule
          is_defined(int_add($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_negate($x: INTEGER): INTEGER
  #handler="""
    args match {
      case Args(IntegerLiteral(_, x)) => -x
      case _ => as_is
    }
  """
  #description="Negate an integer."
  #detail="Compute the negation of the integer $x; that is, compute 0 - $x."
}

decl.{ rule
          is_defined(int_negate($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }

decl.{ rule
          int_negate(int_negate($x))
       ->
          $x
       #ruleset ALWAYS }


decl.{! int_sub($x: INTEGER, $y: INTEGER): INTEGER is %!A!C!I
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x),IntegerLiteral(_,y)) => (x - y)
      case _ => as_is
    }
  """
  #description="Integer subtraction."
  #detail="Compute the difference of the integer arguments $x - $y."
}

decl.{ rule
          is_defined(int_sub($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_mult($x: INTEGER, $y: INTEGER): INTEGER is %AC!ID[1]
  #handler="""
    // Accumulate the integer literals found.
    var lits:BigInt = 1
    // Accumulate other atoms found.
    var other = IndexedSeq[BasicAtom]()
    // Traverse the list and divide the atoms.
    args.foreach {
      x => x match {
        case IntegerLiteral(_, value) => lits *= value
        case _ => other :+= x
      }
    }
    // Now add the accumulated literals to the list.
    other :+= Literal(INTEGER, lits)
    // Construct and return a new operator application.
    Apply(_data.op, AtomSeq(NoProps, other), true)
  """
  #description="Compute the integer product of the arguments."
  #detail="Compute the product of the integer arguments."
}

decl.{ rule
          is_defined(int_mult($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_div($num: INTEGER, $den: INTEGER): INTEGER
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,y)) => x/y
      case _ => as_is
    }"""
  #description="Integer division."
  #detail="Compute the quotient of two integers $num / $den, and discard ".
          "any remainder."
}


decl.{! mod($b: INTEGER, $d: INTEGER): INTEGER
#handler=
"""
  args match {
    case Args(IntegerLiteral(_, b), IntegerLiteral(_, d)) => b mod d
    case _ => as_is
  }
"""
#description="Compute the remainder from division."
#detail="Compute $b mod $d, returning the remainder when $b is divided by $d."
}


//======================================================================
// Integer math, one argument inequality operators.
//======================================================================

decl.{! int_is_zero($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x == 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is zero."
  #detail="Evaluate to true if $x is zero. ".
          "Evaluate to false if $x is non-zero."
}

decl.{ rule
          is_defined(int_is_zero($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_nonzero($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x != 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is non-zero."
  #detail="Evaluate to true if $x is non-zero. ".
          "Evaluate to false if $x is zero."
}

decl.{ rule
          is_defined(int_is_nonzero($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_positive($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x > 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is positive."
  #detail="Evaluate to true if $x is positive. ".
          "Evaluate to false if $x is negative or zero."
}

decl.{ rule
          is_defined(int_is_positive($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_negative($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x < 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is negative."
  #detail="Evaluate to true if $x is negative. ".
          "Evaluate to false if $x is positive or zero."
}

decl.{ rule
          is_defined(int_is_negative($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_nonnegative($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x >= 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is non-negative."
  #detail="Evaluate to true if $x is positive or zero. ".
          "Evaluate to false if $x is negative."
}

decl.{ rule
          is_defined(int_is_nonnegative($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_nonpositive($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => (x <= 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is non-positive."
  #detail="Evaluate to true if $x is negative or zero. ".
          "Evaluate to false if $x is positive."
}

decl.{ rule
          is_defined(int_is_nonpositive($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


//======================================================================
// Integer math, two and three argument inequality operators.
//======================================================================

decl.{! int_less_than($x: INTEGER, $y: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,y)) => (x < y)
      case _ => as_is
    }
  """
  #description="Integer less than."
  #detail="Evaluate to true if $x is less than $y. ".
          "Evaluate to false if $x is greater than or equal to $y."
}

decl.{ rule
          is_defined(int_less_than($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_greater_than($x: INTEGER, $y: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,y)) => (x > y)
      case _ => as_is
    }
  """
  #description="Integer greater than."
  #detail="Evaluate to true if $x is greater than $y. ".
          "Evaluate to false if $x is less than or equal to $y."
}

decl.{ rule
          is_defined(int_greater_than($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_less_or_equal($x: INTEGER, $y: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,y)) => (x <= y)
      case _ => as_is
    }
  """
  #description="Integer less than or equal to."
  #detail="Evaluate to true if $x is less than or equal to $y. ".
          "Evaluate to false if $x is greater than $y."
}

decl.{ rule
          is_defined(int_less_or_equal($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_greater_or_equal($x: INTEGER, $y: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,y)) => (x >= y)
      case _ => as_is
    }
  """
  #description="Integer greater than or equal to."
  #detail="Evaluate to true if $x is greater than or equal to $y. ".
          "Evaluate to false if $x is less than $y."
}

decl.{ rule
          is_defined(int_greater_or_equal($x,$y))
       ->
          and(is_defined($x),is_defined($y))
       #ruleset DOMAIN }


decl.{! int_is_in_interval($x: INTEGER, $low: INTEGER, $high: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x), IntegerLiteral(_,low), IntegerLiteral(_,high)) =>
             ((x >= low) && (x <= high))
      case _ => as_is
    }
  """
  #description="Integer greater than or equal to."
  #detail="Evaluate to true if $x is in the closed interval [$low,$high]. ".
          "Evaluate to false if $x is less than $low or greater than $high."
}

decl.{ rule
          is_defined(int_is_in_interval($x,$low,$high))
       ->
          and(is_defined($x),is_defined($low),is_defined($high))
       #ruleset DOMAIN }


//======================================================================
// Integer math, miscellaneous predicate operators.
//======================================================================

decl.{! int_is_even($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => ((x % 2) == 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is even."
  #detail="Evaluate to true if $x is even. ".
          "Evaluate to false if $x is odd."
}

decl.{ rule
          is_defined(int_is_even($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }


decl.{! int_is_odd($x: INTEGER): BOOLEAN
  #handler="""
    args match {
      case Args(IntegerLiteral(_,x)) => ((x % 2) != 0)
      case _ => as_is
    }
  """
  #description="Integer test if argument is odd."
  #detail="Evaluate to true if $x is odd. ".
          "Evaluate to false if $x is even."
}

decl.{ rule
          is_defined(int_is_odd($x))
       ->
          is_defined($x)
       #ruleset DOMAIN }

