/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

//======================================================================
// General operators.
//======================================================================

def({! equal($x,$y): BOOLEAN is %C
      #description="Report whether two atoms are equal."
      #detail=
"""Test whether the two atoms $x and $y are considered equal by the
system."""
})

//======================================================================
// Integer math.
//======================================================================

def({! mod($b: INTEGER, $d: INTEGER): INTEGER
      #description="Compute the remainder from division."
      #detail=
"""Compute $b mod $d, returning the remainder when $b is divided by $d."""
})

def({! neg($x: INTEGER): INTEGER
      #description="Negate an integer."
      #detail=
"""Compute the negation of the integer $x; that is, compute 0 - $x."""
})

def({! add($x: INTEGER, $y: INTEGER): INTEGER is %AC!ID[0]
      #description="Compute the integer sum of the arguments."
      #detail=
"""Compute the sum of the integer arguments."""
})

//======================================================================
// Boolean math.
//======================================================================

def({operator #name=not #type=BOOLEAN #cases
  %(true) -> %(false),
  %(false) -> %(true),
  %($x: BOOLEAN) -> _,
  true -> false,
  false -> true,
  $x: BOOLEAN -> _
  #description="Boolean negation."
  #detail=
"""Negate a provided Boolean value."""
})

def({operator #name=implies #type=BOOLEAN #cases
  %($P: BOOLEAN, true) -> true,
  %(false, $Q: BOOLEAN) -> true,
  %(true, false) -> false,
  %($P: BOOLEAN, $Q: BOOLEAN) -> _
  #description="Boolean implication."
  #detail=
"""The result is true if either the premise $P is false, or the consequent
$Q is true."""
})

def({operator #name=iff #type=BOOLEAN #cases
  %(true, true) -> true,
  %(false, $Q: BOOLEAN) -> false,
  %($P: BOOLEAN, false) -> false,
  %($P: BOOLEAN, $Q: BOOLEAN) -> _
  #description="Boolean if and only if."
  #detail="""The result is true if both the premise $P and the consequent
$Q are both true."""
})

def({operator #name=if #cases
  %(true, $then @lazy, $else @lazy) -> $$then,
  %(false, $then @lazy, $else @lazy) -> $$else,
  %($P: BOOLEAN, $then @lazy, $else @lazy) -> _
  #description="Simple if-then(-else)."
  #detail="""If the first argument is true, return the second.  If the first
argument is false, return the third."""
})

def({! and($P: BOOLEAN, $Q: BOOLEAN): BOOLEAN is %ACIB[false]D[true]
  #description="Boolean conjunction."
  #detail="""True if all arguments are true, and false if any is false."""
})

def({! or($P: BOOLEAN, $Q: BOOLEAN): BOOLEAN is %ACIB[true]D[false]
  #description="Boolean disjunction."
  #detail="""True if any argument is true, and false if all are false."""
})

def({ operator #name=xor #type=BOOLEAN #cases
  %(true) -> true,
  %(false) -> false,
  %(true, false) -> true,
  %(false, true) -> true,
  %(true, true) -> false,
  %(false, false) -> false,
  %ACD[false](true, $Q: BOOLEAN) -> not($$Q),
  %ACD[false]($P: BOOLEAN, $Q: BOOLEAN) -> _
  #description="Boolean exclusive or."
  #detail="""True if exactly one argument is true, and false otherwise."""
})
