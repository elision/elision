timing(true)

decl.{! c($x:INTEGER):ANY }
decl.{! fid():ANY }
decl.{! gid():ANY }
decl.{! f($x:ANY,$y:ANY):ANY is %ACID[fid()]}
decl.{! g($x:ANY,$y:ANY):ANY is %ACID[gid()]}
decl.{! h($x:ANY,$y:ANY):ANY is %AC}

decl.{! doit($x:ANY):ANY }
decl.{! found($x:ANY,$y:ANY,$z:ANY,$o1:ANY,$o2:ANY):ANY }
decl.{! test():ANY }

decl.{rule doit(f(h($x,0),g(f(h($x,$y),$o1),$o2))) -> found($x,$y,$z,$o1,$o2)
      #rulesets DEFAULT}

decl.{rule test() ->
f(g(
f(h(1,c(8)),h(2,c(1)),h(2,c(2)),h(2,c(3)),h(2,c(7)),h(2,c(8)),h(2,c(9)),h(2,c(13))),
f(h(1,c(9)),h(2,c(1)),h(2,c(2)),h(2,c(3)),h(2,c(7)),h(2,c(8)),h(2,c(9)),h(2,c(13))),
f(h(2,c(2)),h(2,c(3)),h(2,c(4)),h(2,c(5)),h(2,c(6)),h(2,c(7)),h(2,c(8)),h(2,c(9)),h(2,c(11)),h(2,c(12))),
f(h(2,c(3)),h(2,c(4)),h(2,c(5)),h(2,c(6)),h(2,c(7)),h(2,c(8)),h(2,c(9)),h(2,c(10)),h(2,c(11)),h(3,c(2)))),
h(0,c(10)))
      #rulesets DEFAULT}

// setprop("rewrite_aggressive_fail", true)

// doit(f(h(c(1),5),g(f(h(c(1),7),c(2)),c(3))))

// doit(test())

setprop("rewrite_aggressive_fail", false)

doit(f(h(c(1),5),g(f(h(c(1),7),c(2)),c(3))))

doit(test())

