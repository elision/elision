/*======================================================================
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 * The Elision Term Rewriter
 * 
 * Copyright (c) 2012 by UT-Battelle, LLC.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * Collection of administrative costs for redistribution of the source code or
 * binary form is allowed. However, collection of a royalty or other fee in excess
 * of good faith amount for cost recovery for such redistribution is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE DOE, OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
======================================================================*/

println("Reading Test...")

// Get the test stuff.
inc("bootstrap/Test.eli")

// Get the math stuff.
inc("bootstrap/Math.eli")
inc("bootstrap/Debugger.eli")
//debugon("memo")

timing(true)
// Non-commutative, non-associative operators.
decl.{! f1($x: INTEGER): INTEGER}
decl.{! f2($x: INTEGER, $y: INTEGER): INTEGER}
decl.{! f3($x: INTEGER, $y: INTEGER, $z: INTEGER): INTEGER}

// Commutative, non-associative operators.
decl.{! c2($x: INTEGER, $y: INTEGER): INTEGER is %C}
decl.{! c3($x: INTEGER, $y: INTEGER, $z: INTEGER): INTEGER is %C}

// Associative, non-commutative operators.
decl.{! a21($x: INTEGER, $y: INTEGER): INTEGER is %A}
decl.{! a22($x: INTEGER, $y: INTEGER): INTEGER is %A}

// Associative, commutative operators.
decl.{! foo($x: INTEGER, $y: INTEGER): INTEGER is %AC}

_test_init()

// Straight matching.
println("Testing straight matching...")
_test({match f1($x)}.f1(5), {binds x->5})
_test({match f1($x)}.f2(2,3), NONE)
_test({match f2($x,9)}.f2(5,9), {binds x->5})
_test({match f2($x,9)}.f2(9,5), NONE)
_test({match f3($x,$y,14)}.f3(14,13,12), NONE)
_test({match f3($x,$y,14)}.f3(12,13,14), {binds x->12 y->13})
_test_status()

// Testing commutative operators.
println("Testing commutative matching...")
_test({match c2($x,9)}.c2(5,9), {binds x->5})
_test({match c2($x,9)}.c2(9,5), {binds x->5})
_test({match c3($x,12,14)}.c3(14,13,12), {binds x->13})
_test({match c3($x,$y,14)}.c3(12,13,14), {binds x->12 y->13})
_test_status()

// Testing associative operators.
println("Testing associative matching...")
_test({match a21(4,5)}.a21(4,5), {binds})
_test({match a21(4,5,6)}.a21(4,5,6), {binds})
_test({match a21(4,5,6,7)}.a21(4,5,6,7), {binds})
_test({match a21(4,5,6,7,8)}.a21(4,5,6,7,8), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(4,5,6,7,8,9), {binds})
_test_status()
_test({match a21(4,5,6,7,8,9)}.a21(a21(4,5,6,7,8),9), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(4,a21(5,6,7,8),9), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(4,5,a21(6,7,8),9), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(4,5,6,a21(7,8),9), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(4,5,6,7,a21(8),9), {binds})
_test_status()
_test({match a21(4,5,6,7,8,9)}.a21(a21(a21(4,5,6,7),8),9), {binds})
_test({match a21(4,5,6,7,8,9)}.a21(a21(4,a21(5,6,7,8)),9), {binds})
_test({match a21(a21(4,a21(5,6,7,8)),9)}.a21(a21(a21(4,5,6,7),8),9), {binds})
_test({match a21($a,$b,$c,$d,$e)}.a21(1,2,3,4,5), {binds a->1 b->2 c->3 d->4 e->5})
_test({match a21($a)}.a21(17), {binds a->17})
_test_status()
_test({match a21($a)}.a21(4,5,6,7), {binds a->a21(4,5,6,7)})
_test({match a21()}.a21(4), NONE)
_test({match a21($a,9)}.a21(7,8,9), {binds a->a21(7,8)})
_test({match a21($a,9)}.a21(7,9,8), NONE)
_test({match a21($a,9)}.a21(8,9), {binds a->8})
_test_status()
_test({match a21($a,9)}.a21(9), NONE)
_test(eq(a21(4,a21(5,$x)), a21(a21(4,5),$y)), false)
_test(eq(a21(4,a21(5,$x)), a21(a21(4,5),$x)), true)
_test(equal(a21(4,a21(5,9)), a21(a21(4,5),9)), true)
_test_status()

// Testing associative and commutative matching.
println("Testing associative-commutative matching...")
decl.{! fac($x:INTEGER,$y:INTEGER):INTEGER is %AC }
decl.{! fa($x:INTEGER,$y:INTEGER):INTEGER is %A }
decl.{! top($x:INTEGER,$y:INTEGER):INTEGER }
_test(%AC(%AC(2,4),1,3), %AC(1,2,3,4))
_test({match top($x,fac($x,$y))}.top(1,fac(1,1,1,2,3)), { binds x -> 1 y -> fac(1,1,2,3) })
_test({match top($x,fac($x,$y))}.top(fac(1,2),fac(1,2,3)), { binds x -> fac(1,2) y -> 3 })
_test({match top($x,fac($x,$y))}.top(fac(1,2),fac(1,2,3)), { binds x -> fac(1,2) y -> 3 })
_test({match top($x,fac($x,$y))}.top(fac(f1(1),2),fac(f1(1),2,3)), { binds x -> fac(f1(1),2) y -> 3 })
_test_status()

//Issue #194
_test({match fac($a,$b)}.fac(1,2,3), { binds a -> 1 b-> fac(2,3) })
_test({match fac($a,$b) #if equal($$a,1)}.fac(1,2,3), { binds a -> 1 b-> fac(2,3) })
_test({match fa($a,$b) #if equal($$a,2)}.fa(2,1,3), { binds a -> 2 b-> fa(1,3) })
_test({match fac($a,$b) #if equal($$a,2)}.fac(1,2,3), { binds a -> 2 b-> fac(1,3) })
_test({match fac($a,$b) #if equal($$a,3)}.fac(1,2,3), { binds a -> 3 b-> fac(1,2) })
_test_status()

//Issue #195
decl.{! baa($x:INTEGER, $y:INTEGER):INTEGER is %A }
decl.{! baz($x:INTEGER):INTEGER }
_test({match top($x,fac(f1($x),$y))}.top(1,fac(f1(1),1,1,2,3)), { binds x -> 1 y-> fac(1,1,2,3) } )
_test({match top($x,fac(baz(baz($x)),$y))}.top(baz(1),fac(baz(1),1,1,2,3)), NONE ) 
_test({match top($x,fac($x,$y))}.top(baz(1),fac(baz(1),1,1,2,3)), { binds x -> baz(1) y -> fac(1,1,2,3) })
_test({match top($x,fac($x,$y))}.top(1,fac(f1(f1(1)),f1(2),1,2,3)), { binds x -> 1 y -> fac(f1(2),f1(f1(1)),2,3) })
_test_status()

//Eker example
decl.{! f($x: INTEGER, $y: INTEGER, $z: INTEGER): INTEGER}
decl.{! g($x: INTEGER, $y: INTEGER): INTEGER}
decl.{! h($x: INTEGER): INTEGER}
decl.{! F($x:INTEGER, $y:INTEGER):INTEGER is %AC }
decl.{! G($x:INTEGER, $y:INTEGER):INTEGER is %AC }
f(F(g($a,$L),g($M,$b),$N,$N,$P),G($a,g($T,$a),h($Q),h($S),$N,$U,$U),$V)
f(F($a,$b,$b,g($a,$b),g($a,$c),g($b,$a),g($c,$b)),G($a,$a,$a,$b,g($b,$a),h($a),h($b)),F($a,$b))
_test({match f(F(g(5,$L),g($M,6),$N,$N,$P),G(5,g($T,5),h($Q),h($S),$N,$U,$U),$V)}.f(F(5,6,6,g(5,6),g(5,7),g(6,5),g(7,6)),G(5,5,5,6,g(6,5),h(5),h(6)),F(5,6)), {  binds N -> 6 T -> 6 U -> 5 M -> 7 V -> F(5,6) Q -> 5 L -> 6 P -> F(g(6,5),g(5,7),5) S -> 6 })
_test_status()

//Intentional failure to test SequenceMatcher's operator name comparison
_test({match top($x,fac(f1(f1($x)),$y))}.top(1,fac(f1(f2(1,9)),1,1,2,3)), NONE )
_test_status()

// Done.
println("Testing complete.")
_test_status()
